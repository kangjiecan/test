# .github/workflows/azure-static-web-apps-ci-cd.yml

name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    permissions:
        id-token: write # Required for OIDC authentication if you switch to it
        contents: read  # Required to checkout the code

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # Note: These OIDC steps might be redundant if you're primarily using the deployment token below.
      # The deploy action often handles authentication internally.
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client
      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
          script: |
            const coredemo = require('@actions/core')
            return await coredemo.getIDToken()
          result-encoding: string

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Your Azure Static Web Apps deployment token (secret)
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_LEMON_GRASS_0BFF26710 }}

          # The action to perform: "upload" for building and deploying
          action: "upload"

          ###### Repository/Build Configurations ######
          # --- IMPORTANT ---
          # Find the correct values for YOUR project below!

          # Path to your application source code relative to the repository root.
          # "/" means the source code (like package.json or index.html) is at the root.
          # If it's in a subfolder like "frontend", change this to "frontend".
          app_location: "/"

          # Path to your API source code (Azure Functions) relative to the repository root.
          # Leave as "" if you don't have a managed Azure Functions API.
          api_location: ""

          # --- THIS IS THE CRITICAL LINE TO FIX ---
          # Path where the *built* application assets are located, relative to 'app_location'.
          # You MUST replace "<YOUR_ACTUAL_OUTPUT_FOLDER>" with the real folder name
          # created by your project's build process (e.g., "dist", "public", "out", "wwwroot", etc.).
          # Run your build locally (e.g., npm run build) to see what folder is generated.
          output_location: "<YOUR_ACTUAL_OUTPUT_FOLDER>" # Example: "dist" or "public" or "build" (if it *really* is 'build')

          # Passing OIDC token (optional if deployment token is used and preferred)
          github_id_token: ${{ steps.idtoken.outputs.result }}
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Deployment token is needed to interact with the Azure environment
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_LEMON_GRASS_0BFF26710 }}
          # Action to close the preview environment associated with the PR
          action: "close"
